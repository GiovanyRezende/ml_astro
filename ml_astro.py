# -*- coding: utf-8 -*-
"""ML_astro

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jvJGRR_pAkPfBqzA0U87jK4w3a9FbJCh
"""

import sqlite3
import csv
import pandas as pd
import math
import numpy as np
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score

conn = sqlite3.connect('db_astro.db')
cursor = conn.cursor()

#Para conferir as colunas de uma tabela, se usa o comando:
#data=cursor.execute('''SELECT * FROM {Tabela desejada}''')

colunas = []
data = cursor.execute('''SELECT * FROM tb_corpo_celeste''')
for column in data.description:
  if column[0] == "id":
    pass
  elif column[0] == "id_sistema":
    pass
  elif column[0] == "nome":
    pass
  else:
    colunas = colunas + [column[0]]

cursor.execute('''SELECT
               massa_kg,
               raio_medio_km,
               temperatura_k,
               id_classificacao
               FROM tb_corpo_celeste''')
query = cursor.fetchall()
cursor.execute("SELECT classificacao FROM tb_classificacao")
classif = cursor.fetchall()
classificacao = []
for x in classif:
  classificacao = classificacao + [x[0]]

a_csv = 'dados.csv'

with open(a_csv, 'w', newline='') as arquivo_csv:
    escritor_csv = csv.writer(arquivo_csv)
    escritor_csv.writerow(colunas)
    for x in query:
        escritor_csv.writerow(x)

df = pd.read_csv(a_csv)

G = 6.67e-11

df['volume_m3'] = 4*math.pi*((df['raio_medio_km']*1000)**3)/3
df['densidade_kg/m3'] = df['massa_kg']/df['volume_m3']
df['g'] = G*df['massa_kg']/((df['raio_medio_km']*1000)**2)
df['r_m2t4'] = ((df['raio_medio_km']*1000)**2)*(df['temperatura_k']**4)

for x in range(0,11):
  X_train, X_test, y_train, y_test = train_test_split(
      df.drop('id_classificacao', axis=1),
      df['id_classificacao'],
      test_size=0.2,
      random_state=42
  )
  model = DecisionTreeClassifier()
  model.fit(X_train, y_train)
  y_pred = model.predict(X_test)
  acuracia = accuracy_score(y_test, y_pred)
  precisao = precision_score(y_test, y_pred, average = 'micro')
  sensibilidade = recall_score(y_test, y_pred, average = 'micro')
  f1 = f1_score(y_test, y_pred, average = 'micro')
  conf_matrix = confusion_matrix(y_test, y_pred)
  if acuracia >= 0.9:
    break

print(f'Acurácia: {acuracia}')
print(f'Precisão: {precisao}')
print(f'Sensibilidade: {sensibilidade}')
print(f'F1-score: {f1}\n')
print('Matriz de Confusão:')
print(conf_matrix,'\n')

nomes_exo = ["NGTS-9 b", "HD 86226 c", "TOI-2373 b", "TOI-2524 b", "NGTS-9", "TOI-2524"]
mass_exo = [5.505939999999999e+27, 4.3307066e+25, 1.7656980000000002e+28, 1.2151039999999999e+27,
            1.34*1.9891e30,1.01*1.9891e30]
raio_exo = [76496.44, 13776.5084, 66487.56, 71492.0,
            1.38*6.96e5,1.12*6.96e5]
temp_exo = [1448.0, 1311.0, 860.0, 1100.0,6330.0,5831.0]

dados_exo = {
    'massa_kg': mass_exo,
    'raio_medio_km': raio_exo,
    'temperatura_k': temp_exo
}
df_exo = pd.DataFrame(dados_exo)

df_exo['volume_m3'] = 4*math.pi*((df_exo['raio_medio_km']*1000)**3)/3
df_exo['densidade_kg/m3'] = df_exo['massa_kg']/df_exo['volume_m3']
df_exo['g'] = G*df_exo['massa_kg']/((df_exo['raio_medio_km']*1000)**2)
df_exo['r_m2t4'] = ((df_exo['raio_medio_km']*1000)**2)*(df_exo['temperatura_k']**4)

probabilidades = model.predict_proba(df_exo)
probabilidades = np.matrix(probabilidades)
probabilidades = pd.DataFrame(probabilidades,index=nomes_exo,columns=classificacao)

print("Probabilidades de cada classificação:\n")
print(probabilidades,'\n')

if acuracia >= 0.9:
  for x,y in probabilidades.iterrows():
    if y['Estrela'] >= 0.95:
      try:
        cursor.execute('SELECT MAX(id)+1 FROM tb_sistema_solar')
        id_sistema = cursor.fetchone()[0]
        cursor.execute('''INSERT INTO tb_sistema_solar VALUES (?, ?, 2)''', (id_sistema, x))

        cursor.execute('SELECT MAX(id)+1 FROM tb_corpo_celeste')
        id_corpo = cursor.fetchone()[0]

        cursor.execute('SELECT id FROM tb_sistema_solar WHERE nome = ?', (x,))
        id_sistema = cursor.fetchone()[0]

        cursor.execute('''INSERT INTO tb_corpo_celeste VALUES (?, ?, ?, ?, ?, ?, 2)''',
                      (id_corpo, x, mass_exo[nomes_exo.index(x)],
                      raio_exo[nomes_exo.index(x)],
                      temp_exo[nomes_exo.index(x)],
                      id_sistema))

        cursor.execute('SELECT MAX(id)+1 FROM tb_estrela')
        id_estrela = cursor.fetchone()[0]

        cursor.execute('SELECT id FROM tb_corpo_celeste WHERE nome = ?', (x,))
        id_corpo = cursor.fetchone()[0]

        cursor.execute('''INSERT INTO tb_estrela VALUES (?, ?)''', (id_estrela, id_corpo))
      except Exception as e:
        print("Deu erro no cadastro:", str(e))
      else:
        conn.commit()

cursor.close()
conn.close()
print("Projeto concluído!")